.TH "custom_service/ble_cus_p.c" 3 "Fri Jul 24 2020" "BLE SWITCH (REMOTE) APPLICATION" \" -*- nroff -*-
.ad l
.nh
.SH NAME
custom_service/ble_cus_p.c
.SH SYNOPSIS
.br
.PP
\fC#include 'ble_cus_p\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'ble_conn_state\&.h'\fP
.br
\fC#include 'ble\&.h'\fP
.br
\fC#include 'ble_srv_common\&.h'\fP
.br
\fC#include 'nrf_log\&.h'\fP
.br
\fC#include 'sdk_common\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBon_connect\fP (\fBble_cus_t\fP *p_cus, ble_evt_t const *p_ble_evt)"
.br
.RI "Function for handling the Connect event\&. "
.ti -1c
.RI "static void \fBon_disconnect\fP (\fBble_cus_t\fP *p_cus, ble_evt_t const *p_ble_evt)"
.br
.RI "Function for handling the Disconnect event\&. "
.ti -1c
.RI "static void \fBon_write\fP (\fBble_cus_t\fP *p_cus, ble_evt_t const *p_ble_evt)"
.br
.RI "Function for handling the Write event\&. "
.ti -1c
.RI "void \fBble_cus_on_ble_evt\fP (ble_evt_t const *p_ble_evt, void *p_context)"
.br
.RI "Function for handling the Application's BLE Stack events\&. "
.ti -1c
.RI "uint32_t \fBble_cus_init\fP (\fBble_cus_t\fP *p_cus, const \fBble_cus_init_t\fP *p_cus_init)"
.br
.RI "Function for initializing the Custom Service\&. "
.ti -1c
.RI "static ret_code_t \fBcustom_notification_send\fP (ble_gatts_hvx_params_t *const p_hvx_params, uint16_t conn_handle)"
.br
.ti -1c
.RI "ret_code_t \fBble_cus_custom_value_update\fP (\fBble_cus_t\fP *p_cus, uint8_t *pData, uint8_t length)"
.br
.RI "Function for updating the custom value\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "ret_code_t ble_cus_custom_value_update (\fBble_cus_t\fP * p_cus, uint8_t * pData, uint8_t length)"

.PP
Function for updating the custom value\&. The application calls this function when the cutom value should be updated\&. If notification has been enabled, the custom value characteristic is sent to the client\&. 
.PP
\fBParameters\fP
.RS 4
\fIp_cus\fP Switch Service structure\&. 
.br
\fIpData\fP Data to update 
.br
\fIlength\fP length of Data
.RE
.PP
\fBReturns\fP
.RS 4
NRF_SUCCESS on success, otherwise an error code\&. 
.RE
.PP

.SS "uint32_t ble_cus_init (\fBble_cus_t\fP * p_cus, const \fBble_cus_init_t\fP * p_cus_init)"

.PP
Function for initializing the Custom Service\&. 
.PP
\fBParameters\fP
.RS 4
\fIp_cus\fP Custom Service structure\&. This structure will have to be supplied by the application\&. It will be initialized by this function, and will later be used to identify this particular service instance\&. 
.br
\fIp_cus_init\fP Information needed to initialize the service\&.
.RE
.PP
\fBReturns\fP
.RS 4
NRF_SUCCESS on successful initialization of service, otherwise an error code\&. 
.RE
.PP

.SS "void ble_cus_on_ble_evt (ble_evt_t const * p_ble_evt, void * p_context)"

.PP
Function for handling the Application's BLE Stack events\&. Handles all events from the BLE stack of interest to the Battery Service\&.
.PP
\fBParameters\fP
.RS 4
\fIp_context\fP 
.br
 
.br
\fIp_ble_evt\fP Event received from the BLE stack\&. 
.RE
.PP

.SS "static ret_code_t custom_notification_send (ble_gatts_hvx_params_t *const p_hvx_params, uint16_t conn_handle)\fC [static]\fP"

.SS "static void on_connect (\fBble_cus_t\fP * p_cus, ble_evt_t const * p_ble_evt)\fC [static]\fP"

.PP
Function for handling the Connect event\&. 
.PP
\fBParameters\fP
.RS 4
\fIp_cus\fP Custom Service structure\&. 
.br
\fIp_ble_evt\fP Event received from the BLE stack\&. 
.RE
.PP

.SS "static void on_disconnect (\fBble_cus_t\fP * p_cus, ble_evt_t const * p_ble_evt)\fC [static]\fP"

.PP
Function for handling the Disconnect event\&. 
.PP
\fBParameters\fP
.RS 4
\fIp_cus\fP Custom Service structure\&. 
.br
\fIp_ble_evt\fP Event received from the BLE stack\&. 
.RE
.PP

.SS "static void on_write (\fBble_cus_t\fP * p_cus, ble_evt_t const * p_ble_evt)\fC [static]\fP"

.PP
Function for handling the Write event\&. 
.PP
\fBParameters\fP
.RS 4
\fIp_cus\fP Custom Service structure\&. 
.br
\fIp_ble_evt\fP Event received from the BLE stack\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for BLE SWITCH (REMOTE) APPLICATION from the source code\&.
